#To update file in index avoid OS
git update-index --chmod=+x <file>

#Or if file isn't in index yet
git add --chmod=+x <file>

#to add file avoid .gitignore (force)
git add -f .idea/../someNeededFile

#To see the commit
git show <commitID>
#Current commit
git show --pretty=fuller

#To set athor of commit. You will be commiter but code author - can be some one else
git commit --author='John Snow <johnSnow@gmail.com>' --date='...' 

#to discard changes from index
git reset HEAD .idea

#to add some code from file
git add -p <file>

#To commit with add, BUT This won't work with untracked (not in index) files.  
git commit -am 'message'

#Commit specific file, file, directories.
git commit -m 'message' <file/files/dir>

#git add . -> adds only current directory
#git add -A -> no matter where are you, adding all from root. 

#To remove directory, automaticly git will add this change to index
git rm -r dirtoDelete

#to remove drom index - but make untracked
git rm -r --cached file/dirToRemoveFromChach

#to rename
git mv file1 file2

#Cchery pick - to get some commit from branch and merge it with other branch 

#branch - it's just a link to some commit. You can check it in .git/refs/heads/
# git branch -v shows the commit on what commit branch is looking

#.git/refs/HEAD - current branch

After you done a coomit - it contains information about previous commit, 
on the base of it was created, and HEAD link points on new commit.
Commit that HEAD is pointing to - called TOP of hte branch.