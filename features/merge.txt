MERGE
We merging develop to feature.
In feature we have commits: init, 1f, 2f.
In develop we have commits: init, 1d, 2d. 
feature>git merge develop
Git will grab TOP of develop (2d) and try to merge it with TOP of feature. 
After resolving conflicts (or not) - merge commit will be created 3mc.
Here we are, feature merged with develop. Log will show:
>3mc
>2d
>1d
>2f
>1f
>init
So when we make merge - we have addition merge commit, and hystory of full development in develop branch
and feature branch. So it's simple to return on state that you like.
MERGE USE - BRING LATEST CHANGES FROM DEVELOP TO FEATURE WITH MERGE COMMIT and have separate history of development
in these two branches (not rewritted).

Checkout in branch you want to merge in.
$>git checkout develop
$>git merge featureBranch
BE CAREFULL this will create a merge commit. What happened - git has moved develop HEAD to
featureBranch HEAD. So simply develop became same as featureBranch. (with condition that featureBranch
was branched from develop, and there were no commits in develop branch, so it's not a common case);

git helping us witha merge - storing last before merge commit in current branch in ORIG_HEAD
$>cat .git/ORIG_HEAD - stores last commit
to return develop in previous state we cat use it
$>git branch -f develop ORIG_HEAD - will rectreate develop with HEAD on ORIG_HEAD commit.

So in feature we've done some commits and in develop we've done commits after feature was branched.
And if we moved HEAD of develop to feature - we will lost our commits from develop.
So in this situation git makes true merge and analyze each commit and creates a special merge commit,
were changes from two branches merged together.

develop$>git merge feature

1.Git will find commit where feature was branched from develop. We can do it also with
git merge-base develop feature.
2.Git takes in count 3 version of files:
-1) Base version. It's version of file that was in branching commit.
-2) Ours - we are on develop branch, that means that ours - is version from HEAD (TOP?)
of the develop branch.
-3) Theirs - version from feature HEAD.
So the formula is:
base + ours + theirs = file merged version.

If the auto-merge is failed - that brings us to broken auto-merge state of branch. CONFLICT.
Commit that we are trying to merge with in develop branch - is feature HEAD, and it 
stores in MERGE_HEAD.(.git/MERGE_HEAD).
If in develop file wasn't changed but in feature was - git will try to add changes from feature
to merge commit file version, and visa versa.

So as it was said git trying to help us durring merge.
If it sees that in develop in file a.js on line 1 - was no changes compare with base file, 
but in feature in file a.js line 1 was changed compare to base version - it will add in merge 
commit version of file a.js - changes from feature.
But if in develop a.js 1st line was changed and in feature a.js line 1 was changed - git doesn't know 
what to do - and it calls us to intrude and resolve conflict.

So depend where you are, and in this particular case we merging from develop branch - 
<<<<<<< HEAD (means in current branch HEAD, means in develop code is next)
  some develop changes
============
  some feature changes
>>>>>>> feature (means in theirs, feature HEAD, means in feature code is beyond)

For example we want to take changes that in develop, then
$>git checkout --ours a.js (oposite to checkout --theirs a.js)
Will add in index changes that develop has in a.js file.

If we see that conflicts are pretty serious, and we cannot merge properly - we can:
- hardly reset file or branch to develop HEAD state, means do not do with it anything.
git reset --hard
- if we have some unindex files, and we making a merge - we can use 
git reset --merge (same as git merge --abort)
It will reset all files that was afected by merge to develop HEAD state, but won't touch any
files that was not affected by merging, and was in working directory. Hard reset - will reset all
files to develop HEAD state.

If you want to see 3 variants of file, you can: 
$>git checkout --conflict=diff3 --merge a.js 

So you've changed a file as you waned, delete with hands all those unneeded changes "<<<...", etc.
but you cannot do a coomit now, because when you in merge conflict state, in index - there are
three variants of file existing. 1 - base, 2 - yours, 3 - theirs. you can check it with
$>git show :1:a.js
$>git show :2:a.js
$>git show :3:a.js

That's why we need to add to index only one version. So
$>git add a.js (or add .)

After conflicts are resolved, and all in index, we can do either:
$>git commit (witch make a merge commit and finishes the merge)
or
$>git merge --continue (witch is equal to commit.)

So this new commit, merge commit is special. It has not one, as all regular commits have, but
two ancestors. HEADs of branches that were merged.
We can see that if we make git log --graph --oneline, or git show/log (the last commit will be
Merge: 0cbc23b (ORIG_HEAD, develop) 7c50372(MERGE_HEAD, feature)), so log saying to us - that 
it is a merge commit. Also we can see that diff - is combined by two commits, and commpresed, 
means - diff shows only changes from conflict files. Also "+" is on different positions, means 
+ changes from feature
 +changes that was in deelop

If we want to see changes from develop ORIG_HEAD
$>git show --first-parent

but we can use ^ sigh in diff commant - more usefull for merge commits
$>git diff HEAD^1 (same as HEAD^) - see difference with develop commit parent 
$>git diff HEAD^2 - see difference with feature commit parent
$>git diff HEAD^1^ (same as HEAD^^) - see difference with develop commit previous parent 
$>git diff HEAD^2^ - see difference with feature commit previous parent


Usefull to add --log when you merging. It adds a commit messages from feature branch
to merge commit message. It help you to realise what kind of changes where done by commit
messages, so it's like a little story.
develop$>git merge feature --log=5 (5 last commit messages added from feature branch)

After merge - if we tap git log - it will show all commits from develop? and all commits from
feature. Thats not that we are looking for as usual, so to see commits only from develop
$>git log --oneline --first-parent (with condition that every merge was from develop)

REVERT/CHANGE MERGING
It's the same revert, fact that commit has two parrents - doesn't matter, because merge commit
is only in develop branch - and we can simply reset to commit before
$>git reset --hard @~

Or for example, we reverted, make some changes and wanted to go back on our first commit.
We can find those commits in reflog
$>git reflog -3
b854ccf (HEAD -> develop, origin/develop) HEAD@{0}: commit: first true merge done
fc0a1bf HEAD@{1}: commit (merge): Merge branch 'feature1' into develop
207e6d3 HEAD@{2}: reset: moving to HEAD

$>git reset --hard @{1}
and we will go back on previous merge commit

Situation, developing features were in two branches, in one branch - some function was improved, 
in other - doesn't improved, and added call for not improved function somewhere. And we made a merge.
Git didn't complane about merge conflicts - because there was no conflicts in file, just added
non-improved function call. But code won't work properly. This situation called symantic conflict,
means code is conflicted by sence not by file.
To resolve this situation, we will reset hard on previous commit, and make a merge again but with:

develop$>git merge feature --no-commit
This will make a merge, but without commit in the end. So we will in merge-conflict state, with changes
in index, and have ability to fix all sematic conflicts, and then make a merge commit as we will 
do if there was some file conflict.

Always make a merge commit.
If there were no commits in develop branch since feature branched from it, and there a few commits in 
feature - then merge with fetaure will be just simple moving develop HEAD to feature HEAD, fast forward.
And we have some troubles with it:
- If there is a bug - we cannot understand easily where merge was done - no merge coomit.
- We cannot understand on witch commit we should revert.
So it's better do do merge
develop$>git merge --no-off feature

$>git config merge.ff false (turn off fast forward merging)
$>git branch.develop.mergeoptions '--no-ff' (disable ff for develop)
develop$>git merge --ff feature (enable ff for this merge)

SQUASH
For example you where doing something crazy in feature, a lot off commits, and you are too lazy to make them one.
If you need to merge changes from branch, but don't want whole branch changes - then you can grab changes from branch
and use them in develop. So it's NOT MERGE, it's geting changes from feature into develop index.
develop$>git merge --squash feature
That will add last changes from feature branch to develop index or working directory. After that you can make a 
regular commit in develop branch. So you will have clear develop history and changes from feature.
SQUASH USE - BRING ONLY CHANGES FROM DEVELOP TO FEATURE INDEX, WITHOUT DEVELOP HISTORY.

Be aware that for this merge git doesn't create a MERGE_HEAD with a feature HEAD in it. So you cannot do:
git merge --abort - will be error. (its an alias for: git reset --merge - it will solve problem)

So after resolving conflicts - just make a commit.

Merge driver - it's a technic that git uses to merge files.
We can edit it in .gitattributes
union driver - is pretty weak, it adding every rows with every, it's pretty uncomfortable for code but 
quiet good for some log files, where info only added to the eng for example.
Git also allows you to create your own merge driver.

MERGE STRATEGY
-recursive (default)
-octopus
-ours
-resolve
-subtree

Recursive.
Named like that because it can merge from parents that has same parents each other.
Has features:
-Xours/-Xtheirs - ability to resolve conflicts in favor (пользу) of some branch. So changes that not conflicted
in feature will be merged, but all conflicts resolved in favor of develop, and visa versa.
$>git merge -Xours feature (or -Xtheirs)

-Xrenormalize - if code in feature has different ends of rows and files, we can try to resole it
Also there a opitions to ignore space changes -Xignore-all-space -Xignore-space-change.

-Xno-renames - If in two branches file renamed different, git will notice that and in merge ask
you to resolve this situation, choose the file that should stay. Also cool thing is if we renamed file 
in feature and change it a little bit (less that 50%), and also changed it in develop, but didn't rename
in develop - if we merge feature in develop, file will be renamed, and changes from feature and develop
- will be in it. But that not always great, if we indeed need new file, we can ask git stop to watch renaming
develop$>git merge -Xno-renames feature
We can ask git to find renamed, as we think files
$>develop$>git merge -Xfind-renames=80 feature (set that simularity should be 80%)

-Xsubtree - We can have separate branch connected to our develop. For example some plugin.
for subtree - we need to have some folder. We can develop subtree separatly, and merge time to time it to 
develop. For example we can store some big functionality there, that need to be separate.
develop$>git merge -Xsubtree=plugin(path to plugin folder) --allow-unrelated-histories (if first time adding) pluginBranch

Also there another instrument - submodule. it's different, if subtree - is a separate branch connected to develop
then submodule - it is a completely different repository connected to current repository, so it's like a subrepository.

Octopus.
This strategy used when we merge more than two branches.
develop$>git merge feature1 feature2 (merge will be with octopus strategy)
Some disadvantages:
1.If there is a conflict - merge will fail.
2.Harder to abort merge with some specific branch.
This strategy used when you have a lot of branches, that implements different functionality, to save time - you
can merge a few branches at once.

Ours.
Strategy that completely ignores changes from feature branch. To fire - you should choose it by strategy flag.
Different from recursive -Xours (that will add non-conflicts from feature). So basicaly it makes merge but doesn't 
do anything. :-\
develop$>git merge -s ours feature

Resolve / Subtree.
Old strategies, that exist by historical reason. Resolve - changed by recursive, wih flags. Subtree - changed by
recursive with -Xsubtree flag. 